<%- include('partials/header') %>

<%
    function formatUTCDate(dateString) {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        const month = (date.getUTCMonth() + 1).toString().padStart(2, '0');
        const day = date.getUTCDate().toString().padStart(2, '0');
        const year = date.getUTCFullYear();
        const hours = date.getUTCHours().toString().padStart(2, '0');
        const minutes = date.getUTCMinutes().toString().padStart(2, '0');
        return `${month}/${day}/${year} ${hours}:${minutes} UTC`;
    }

    function formatNotes(text) {
        if (!text || text.trim() === '') {
            return '<p>No notes have been added for this project.</p>';
        }
        const urlRegex = /(https?:\/\/[^\s]+)/g;
        let formattedText = text.replace(urlRegex, '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>');
        formattedText = formattedText.replace(/\n/g, '<br>');
        return formattedText;
    }
%>

<div class="history-container">
    <h2>Details for <%= project.custom_title || project.project_url %></h2>
    <p><strong>Project URL:</strong> <a href="<%= project.project_url %>" target="_blank"><%= project.project_url %></a></p>

    <% if (typeof message !== 'undefined' && message) { %>
        <p class="success-message"><%= message %></p>
    <% } %>

    <div class="chart-container">
        <canvas id="scoreChart"></canvas>
    </div>

    <h3>Scan History</h3>
    <% if (scores && scores.length > 0) { %>
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Score</th>
                        <th>Scan Date from Report</th>
                        <th>Date Checked by App</th>
                    </tr>
                </thead>
                <tbody>
                    <% scores.slice().reverse().forEach(score => { %>
                        <tr>
                            <td><%= score.score %>%</td>
                            <td><%= score.scan_date %></td>
                            <td><%= formatUTCDate(score.checked_at) %></td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    <% } else { %>
        <p>No historical score data found for this project yet.</p>
    <% } %>

    <% if (scores && scores.length > 0) { %>
        <% const latestScan = scores[scores.length - 1]; %>
        <% if (latestScan.issues_html) { %>
            <h3>Number of issues (from last scan on <%= latestScan.scan_date %>)</h3>
            <div class="table-container issues-table">
                <%- latestScan.issues_html %>
            </div>
        <% } %>
    <% } %>

    <!-- UPDATED: Action Items Section with Description Field -->
    <div class="action-items-container">
        <h3>Action Items</h3>
        <div class="form-container">
            <form action="/project/<%= project.id %>/action-items/add" method="POST">
                <input type="text" name="task" placeholder="New task title..." required>
                <textarea name="description" rows="3" placeholder="Add a detailed description (optional)..."></textarea>
                <div class="form-row">
                    <input type="text" name="owner" placeholder="Owner">
                    <select name="priority" required>
                        <option value="High">High Priority</option>
                        <option value="Medium" selected>Medium Priority</option>
                        <option value="Low">Low Priority</option>
                    </select>
                </div>
                <button type="submit" class="btn-primary">Add Task</button>
            </form>
        </div>

        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Task / Description</th>
                        <th>Owner</th>
                        <th>Priority</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% actionItems.forEach(item => { %>
                        <tr class="status-<%= item.status.replace(' ', '-').toLowerCase() %>">
                            <td>
                                <div class="task-title"><%= item.task %></div>
                                <% if (item.description) { %>
                                    <div class="task-description"><%= item.description %></div>
                                <% } %>
                            </td>
                            <td><%= item.owner %></td>
                            <td class="priority-<%= item.priority.toLowerCase() %>"><%= item.priority %></td>
                            <td>
                                <form action="/project/<%= project.id %>/action-items/update/<%= item.id %>" method="POST">
                                    <select name="status" onchange="this.form.submit()">
                                        <option value="To Do" <%= item.status === 'To Do' ? 'selected' : '' %>>To Do</option>
                                        <option value="In Progress" <%= item.status === 'In Progress' ? 'selected' : '' %>>In Progress</option>
                                        <option value="Done" <%= item.status === 'Done' ? 'selected' : '' %>>Done</option>
                                    </select>
                                </form>
                            </td>
                            <td>
                                <form action="/project/<%= project.id %>/action-items/delete/<%= item.id %>" method="POST" style="display:inline;">
                                    <button type="submit" class="btn-danger">Delete</button>
                                </form>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    </div>

    <div class="notes-container">
        <h3>Meeting Notes</h3>
        <div id="notes-view-mode">
            <div class="notes-content"><%- formatNotes(project.meeting_notes) %></div>
            <button type="button" id="edit-notes-btn" class="btn-secondary">Edit Notes</button>
        </div>
        <form id="notes-edit-mode" action="/project/notes/<%= project.id %>" method="POST" style="display: none;">
            <textarea name="notes" rows="8" placeholder="Enter notes..."><%= project.meeting_notes || '' %></textarea>
            <div class="form-actions">
                <button type="submit" class="btn-primary">Save Notes</button>
                <button type="button" id="cancel-edit-btn" class="btn-secondary">Cancel</button>
            </div>
        </form>
    </div>
</div>

<%- include('partials/footer') %>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Chart.js and notes toggle logic (unchanged)
    const scoresData = <%- JSON.stringify(scores) %>;
    if (scoresData && scoresData.length > 0) {
        const ctx = document.getElementById('scoreChart').getContext('2d');
        const labels = scoresData.map(s => new Date(s.checked_at).toLocaleDateString());
        const dataPoints = scoresData.map(s => s.score);
        new Chart(ctx, {
            type: 'line', data: { labels, datasets: [{ label: 'Score History (%)', data: dataPoints, borderColor: 'rgba(75, 192, 192, 1)', backgroundColor: 'rgba(75, 192, 192, 0.2)', fill: true, tension: 0.1 }] },
            options: { responsive: true, maintainAspectRatio: false, scales: { y: { suggestedMin: Math.min(...dataPoints) - 5, suggestedMax: 100 } } }
        });
    }
    const editNotesBtn = document.getElementById('edit-notes-btn');
    const cancelEditBtn = document.getElementById('cancel-edit-btn');
    const notesViewMode = document.getElementById('notes-view-mode');
    const notesEditMode = document.getElementById('notes-edit-mode');
    if (editNotesBtn) { editNotesBtn.addEventListener('click', () => { notesViewMode.style.display = 'none'; notesEditMode.style.display = 'block'; }); }
    if (cancelEditBtn) { cancelEditBtn.addEventListener('click', () => { notesEditMode.style.display = 'none'; notesViewMode.style.display = 'block'; }); }
</script>

<style>
    .history-container { max-width: 900px; margin: 2rem auto; padding: 2rem; }
    .table-container { margin-top: 1rem; }
    .issues-table { margin-top: 3rem; margin-bottom: 3rem; }
    .action-items-container { margin-bottom: 3rem; }
    .notes-container { margin-top: 3rem; }
    .notes-content { min-height: 100px; padding: 0.75rem; border: 1px solid #e9ecef; border-radius: 4px; background-color: #f8f9fa; margin-bottom: 1rem; }
    .notes-content p { margin: 0; color: #6c757d; }
    .notes-container textarea { width: 100%; padding: 0.75rem; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; font-family: inherit; font-size: 1rem; }
    .form-actions { display: flex; gap: 1rem; margin-top: 1rem; }
    .btn-primary { padding: 0.75rem 1.5rem; border: none; border-radius: 4px; cursor: pointer; background-color: #007bff; color: white; font-weight: bold; }
    .btn-secondary { padding: 0.75rem 1.5rem; border: none; border-radius: 4px; cursor: pointer; background-color: #6c757d; color: white; font-weight: bold; }
    .success-message { color: #155724; background-color: #d4edda; border: 1px solid #c3e6cb; padding: 1rem; border-radius: 4px; margin-bottom: 1.5rem; }
    .form-container { background-color: #f9f9f9; padding: 1.5rem; border-radius: 8px; margin-bottom: 2rem; }
    .form-container input, .form-container select, .form-container textarea { width: 100%; padding: 0.5rem; margin-bottom: 1rem; box-sizing: border-box; }
    .form-row { display: flex; gap: 1rem; }
    .task-title { font-weight: bold; }
    .task-description { font-size: 0.9rem; color: #6c757d; margin-top: 0.25rem; }
    .priority-high { color: #dc3545; font-weight: bold; }
    .priority-medium { color: #fd7e14; }
    .priority-low { color: #6c757d; }
    .status-done .task-title, .status-done .task-description { text-decoration: line-through; color: #6c757d; }
</style>
